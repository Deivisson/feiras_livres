// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Deivisson/free_fairs/domain (interfaces: FairRepository)

// Package domain is a generated GoMock package.
package domain

import (
	reflect "reflect"

	domain "github.com/Deivisson/free_fairs/domain"
	errs "github.com/Deivisson/free_fairs/utils/errs"
	gomock "github.com/golang/mock/gomock"
)

// MockFairRepository is a mock of FairRepository interface.
type MockFairRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFairRepositoryMockRecorder
}

// MockFairRepositoryMockRecorder is the mock recorder for MockFairRepository.
type MockFairRepositoryMockRecorder struct {
	mock *MockFairRepository
}

// NewMockFairRepository creates a new mock instance.
func NewMockFairRepository(ctrl *gomock.Controller) *MockFairRepository {
	mock := &MockFairRepository{ctrl: ctrl}
	mock.recorder = &MockFairRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFairRepository) EXPECT() *MockFairRepositoryMockRecorder {
	return m.recorder
}

// BulkCreate mocks base method.
func (m *MockFairRepository) BulkCreate(arg0 []domain.Fair) *errs.AppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkCreate", arg0)
	ret0, _ := ret[0].(*errs.AppError)
	return ret0
}

// BulkCreate indicates an expected call of BulkCreate.
func (mr *MockFairRepositoryMockRecorder) BulkCreate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkCreate", reflect.TypeOf((*MockFairRepository)(nil).BulkCreate), arg0)
}

// Create mocks base method.
func (m *MockFairRepository) Create(arg0 *domain.Fair) *errs.AppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(*errs.AppError)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockFairRepositoryMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFairRepository)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockFairRepository) Delete(arg0 string) *errs.AppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(*errs.AppError)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockFairRepositoryMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockFairRepository)(nil).Delete), arg0)
}

// FindById mocks base method.
func (m *MockFairRepository) FindById(arg0 string) (*domain.Fair, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", arg0)
	ret0, _ := ret[0].(*domain.Fair)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockFairRepositoryMockRecorder) FindById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockFairRepository)(nil).FindById), arg0)
}

// HasAny mocks base method.
func (m *MockFairRepository) HasAny() (bool, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasAny")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// HasAny indicates an expected call of HasAny.
func (mr *MockFairRepositoryMockRecorder) HasAny() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasAny", reflect.TypeOf((*MockFairRepository)(nil).HasAny))
}

// Search mocks base method.
func (m *MockFairRepository) Search(arg0 *domain.FairSearchRequestDTO) ([]domain.Fair, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", arg0)
	ret0, _ := ret[0].([]domain.Fair)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockFairRepositoryMockRecorder) Search(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockFairRepository)(nil).Search), arg0)
}

// Update mocks base method.
func (m *MockFairRepository) Update(arg0 *domain.Fair) *errs.AppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(*errs.AppError)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockFairRepositoryMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockFairRepository)(nil).Update), arg0)
}
